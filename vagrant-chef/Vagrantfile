# Vagrantfile for creating a set of VM's to show various chef configurations
# ----------------------------------------------------------------------------

# chefserver -- an ubuntu chef server
# chefclient -- an ubuntu chef minion that takes configuration from chefserver
# windows-minion -- a windows minion that is configured from ubuntu-master
# chefsolo -- a stand-alone ubuntu vm that configures chef from the file system

# ----------------------------------------------------------------------------
# Things that might need tweaking for your network
# ----------------------------------------------------------------------------
DOMAIN = 'bhazard.com'
SUBNET = '192.168.7'
DEBUG = true   # Set to true for verbose output
BOOTSTRAP_DEBUG = true
INCLUDE_SOLO = false
INCLUDE_WINDOWS_CLIENT = false

SERVER_IP = "#{SUBNET}.10"
UCLIENT_IP = "#{SUBNET}.11"
WCLIENT_IP = "#{SUBNET}.12"
SOLO_IP = "#{SUBNET}.13"

SERVER_MEMORY = 1024
UCLIENT_MEMORY = 1024
WCLIENT_MEMORY = 2048
SOLO_MEMORY = 1024

# ----------------------------------------------------------------------------

# For RDP to work correctly for windows, we need 1.6.5 or greater.  If you
# don't care about windows (or don't need RDP), older versions should be fine
# and you can comment out the following line. 
Vagrant.require_version ">= 1.6.5"
Vagrant.require_plugin('vagrant-vbguest')

VAGRANTFILE_API_VERSION = '2'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.cache.auto_detect = true if Vagrant.has_plugin?('vagrant-cachier')

# Is this required for chef-server?
  if Vagrant.has_plugin?('vagrant-hostmanager')
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.include_offline = true
  end

# This is the default base image (an ubuntu image) ... for windows vm's, we over-ride this below
  config.vm.box = 'ubuntu-xenial-server-64'
  config.vm.box_url = "http://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-vagrant.box"

# This box does not include the virtualbox shared folders ability, so we must
# be sure it is installed.
# Do not update the Virtualbox guest -- we don't need it for servers
  config.vbguest.auto_update = true if Vagrant.has_plugin?('vagrant-vbguest')

# ----------------------------------------------------------------------------
# chef server configuration
# The server sits both on the private network and presents a website on
# host's NAT'ed network (Port 80 on guest forwarded to localhost:8080)
# ----------------------------------------------------------------------------

  config.vm.define 'chefserver' do |vmconfig|
    vmconfig.vm.network :private_network, ip: SERVER_IP
    vmconfig.vm.hostname = "chefserver.#{DOMAIN}"
    vmconfig.vm.network :forwarded_port, guest: 80, host: 8080, auto_correct: true

    vmconfig.vm.provider :virtualbox do |vb|
      vb.name = vmconfig.vm.hostname
      vb.memory = SERVER_MEMORY
      # vb.customize ["modifyvm", :id, "--memory", SERVER_MEMORY]
    end

    vmconfig.vm.provision :chef_solo do |chef|
      chef.log_level = :debug if DEBUG
      chef.verbose_logging = DEBUG
      chef.add_recipe 'apache'
    end
  end

# ----------------------------------------------------------------------------
# Ubuntu Chef Client configuration
# ----------------------------------------------------------------------------
  config.vm.define 'chefclient' do |vmconfig|
    vmconfig.vm.network :private_network, ip: UCLIENT_IP
    vmconfig.vm.hostname = "chefclient.#{DOMAIN}"
    vmconfig.vm.network :forwarded_port, guest: 80, host: 8080, auto_correct: true

    vmconfig.vm.provider :virtualbox do |vb|
      vb.name = vmconfig.vm.hostname
      vb.memory = UCLIENT_MEMORY
      # vb.customize ["modifyvm", :id, "--memory", UCLIENT_MEMORY]
    end

    vmconfig.vm.provision :chef_solo do |chef|
      chef.log_level = :debug if DEBUG
      chef.verbose_logging = DEBUG
      chef.add_recipe 'apache'
    end

  end

# ----------------------------------------------------------------------------
# Ubuntu Chef Solo configuration
# Configures apache with a simple web page
# ----------------------------------------------------------------------------
  if INCLUDE_SOLO
    config.vm.define 'solo', primary: true do |vmconfig|
      vmconfig.vm.network :private_network, ip: SOLO_IP
      vmconfig.vm.hostname = "chefsolo.#{DOMAIN}"
      vmconfig.vm.network :forwarded_port, guest: 80, host: 8080, auto_correct: true

      vmconfig.vm.provider :virtualbox do |vb|
        vb.name = vmconfig.vm.hostname
        vb.memory = SOLO_MEMORY
        # vb.customize ["modifyvm", :id, "--memory", SOLO_MEMORY]
      end
    
      vmconfig.vm.provision :chef_solo do |chef|
        chef.log_level = :debug if DEBUG
        chef.verbose_logging = DEBUG
        chef.add_recipe 'apache'
      end
    end
  end 

# ----------------------------------------------------------------------------
# Chef Windows Client configuration
# This example assumes that a vagrant-compatible virtualbox image has been
# set up per the instructions in github.com/bhazard/vagrant-examples.
# ----------------------------------------------------------------------------
  if INCLUDE_WINDOWS_CLIENT
    config.vm.define 'wclient'  do |vmconfig|

    # the virtualbox box with windows installed
      vmconfig.vm.box = "win2012serv"
    #config.vm.box_url = "file://win2012serv"

    # communicate via winRDP instead of ssh:
      vmconfig.vm.communicator = 'winrm'

    # Ensure that all networks are set to private
      vmconfig.windows.set_work_network = true

      vmconfig.vm.guest = :windows
    # setting of hostname triggers a reboot of the OS
      vmconfig.vm.hostname = 'WCLIENT'
      vmconfig.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
      vmconfig.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true

      vmconfig.vm.network :private_network, ip: WCLIENT_IP
   # vmconfig.vm.network :forwarded_port, guest: 80, host: 8080, auto_correct: true

      vmconfig.vm.provider :virtualbox do |vb|
        vb.name = vmconfig.vm.hostname
        vb.gui = true
        vb.customize ["modifyvm", :id, "--memory", WCLIENT_MEMORY]
      end

    # bootstrap salt via a modified bootstrap script
      vmconfig.vm.provision :shell, inline: "cp /vagrant/salt/keys/windows-minion.pem c:/tmp/minion.pem"
      vmconfig.vm.provision :shell, inline: "cp /vagrant/salt/keys/windows-minion.pub c:/tmp/minion.pub"
      vmconfig.vm.provision :shell, path: "bootstrap-salt.ps1"   

    # Vagrant salt provisioner has a bug as of 1.6.5 that causes it to fail if 
    # the bootstrap file is not present.  So we need to "touch" it before salt.
    #  vmconfig.vm.provision :shell, inline: "echo 'foo' > c:/tmp/bootstrap_salt.ps1"   

    # Windows Issues:
    # - Vagrant bug above
    # - doesn't use the supplied minion_config when it runs state.highstate
    #   so the minion only talks to salt (or tries to)

 #     vmconfig.vm.provision :salt do |salt|
 #       salt.verbose = DEBUG
 #       salt.minion_config = 'salt/windows-minion'
 #       salt.minion_key = 'salt/keys/windows-minion.pem'
 #       salt.minion_pub = 'salt/keys/windows-minion.pub'
 #       salt.run_highstate = false
#        salt.no_minion = true
  #      salt.log_level =  'debug' if DEBUG
      #  salt.bootstrap_options = '-D' if BOOTSTRAP_DEBUG
      #  colorize = false
   #   end

    #  vmconfig.vm.provision :shell, inline: "cp c:/tmp/minion c:/salt/conf"
     # vmconfig.vm.provision :shell, inline: "restart-service salt-minion"
#      vmconfig.vm.provision :shell, inline: "c:/salt/salt-call state.highstate"

    end 
  
  end #if INCLUDE_WINDOWS_CLIENT


end
