# Vagrantfile to demonstrate how to launch a Windows guest and provision it
# via Microsoft Desired State Configuration (DSC).  The example here simply
# adds the Web Server role and installs a simple index.html page.  Verify by
# pointing your browser to localhost:8080 from the host.
# =============================================================================

# ------------------------------------------------------------------
# Things that might need tweaking for your world
# ------------------------------------------------------------------

# Name for the vbx machine, as well as the guest's hostname
HOSTNAME = 'howindsc'
VBX_NAME = 'vbxwindsc'

# the virtualbox box with windows installed and configured for vagrant use
#   see the github wiki page for information on how to create this base box
VBX_BASE_BOX = 'win2012serv'
GUEST_IP = '192.168.2.10'
GUEST_MEMORY = 2048

# ------------------------------------------------------------------

# The vagrant rdp command is broken prior to 1.6.4, but you can use earlier
# versions as long as you launch RDP via your usual client
Vagrant.require_version ">= 1.6.4"

VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.cache.auto_detect = true if Vagrant.has_plugin?('vagrant-cachier')

  config.vm.box = VBX_BASE_BOX
  #config.vm.box_url = "file://win2012serv"

  # communicate via winRDP instead of ssh:
  config.vm.communicator = 'winrm'

  # Ensure that all networks are set to private (i.e., they are trusted)
  config.windows.set_work_network = true

  config.vm.define "win", primary: true do |vmconfig|
    vmconfig.vm.network :private_network, ip: GUEST_IP
    vmconfig.vm.guest = :windows
    # set the guest's hostname
    # setting of hostname does not work in the vagrant 1.6.3 windows guest
    # setting the hostname in windows requires a restart of the guest.  vagrant 
    #   does this for you, but of course restart takes time.  
    #   Comment out after first up.
    vmconfig.vm.hostname = HOSTNAME

    # Forward some ports.  The first two are required for vagrant to control the
    # guest.  The third is needed to support out example DSC configuration which
    # provisions the guest with the Windows Role of Web Server.
    vmconfig.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
    vmconfig.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true
    vmconfig.vm.network :forwarded_port, guest: 80, host: 8080, id: "http", auto_correct: true

    vmconfig.vm.provider :virtualbox do |vb|
      vb.gui = true
      vb.name = VBX_NAME
      vb.customize ["modifyvm", :id, "--memory", GUEST_MEMORY]
    end

  # DSC provisioner demo -- runs a PowerShell script to provision according to the
  # configuration in config.ps1.  This provisioner expects that this directory
  # has been shared in the guest as C:\vagrant.  This works for first up, but
  # seems to not persist through restarts.  vagrant reload will re-establish the share.
  # TO-DO: add an explicit share for this.
  # TO-DO: parameterize the hostname

    $script = <<-SCRIPT
      Write-Host Starting DSC provisioning of ($env:computername)
      cd c:\\vagrant
      . c:\\vagrant\\config.ps1
      MyWebConfig
      Start-DscConfiguration -path c:\\vagrant\\MyWebConfig -wait -verbose
      Write-Host Done.
    SCRIPT
  
    vmconfig.vm.provision 'shell', 
      inline: $script
    
  end

end
